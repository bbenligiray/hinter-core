name: Build and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push images to Docker Hub'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: bbenligiray/hinter-core

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(grep '"version"' package.json | cut -d '"' -f 4)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event.inputs.push_to_registry == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.package-version.outputs.version }}
          labels: |
            org.opencontainers.image.title=hinter-core
            org.opencontainers.image.description=Reference implementation of the hinter protocol
            org.opencontainers.image.version=${{ steps.package-version.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Create and push git tag
        if: github.event.inputs.push_to_registry == 'true'
        run: |
          VERSION=${{ steps.package-version.outputs.version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists, skipping tag creation"
          else
            git tag -a "v$VERSION" -m "Release version $VERSION"
            git push origin "v$VERSION"
            echo "Created and pushed tag v$VERSION"
          fi

      - name: Output image details
        run: |
          echo "## Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.package-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: latest, ${{ steps.package-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pushed**: ${{ github.event.inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.push_to_registry }}" == "true" ]; then
            echo "- **Git Tag**: v${{ steps.package-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi